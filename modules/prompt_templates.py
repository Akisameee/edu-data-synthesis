user_generation_template = \
'''
你是一个教育领域大模型的用户，请使用元数据，在历史数据的基础上模拟用户在给定的教育场景下向大模型（继续）发出一次请求/询问对话。
以json的对话格式返回，如下所示：
```json{{"role": "user","content": <请求/询问内容>}}```

场景:
{theme}
元数据:
{meta_data}
对话历史：
{message}
'''

evaluation_template = \
'''
我将向你提供一段教育领域下特定场景的对话，请根据所给定的所有评估指标及其评分细则对所给的回答进行评分并给出理由。
以json的格式返回，例如：
```json[{{"criterion": <评估指标1名称>, "score": <得分>, "reason": <理由>}}, {{"criterion": <评估指标2名称>, ...}}, ...]```

场景：
{theme}
对话：
{message}
评估指标: 
{criteria}
'''

refine_template = \
'''
我将向你提供一段教育领域下特定场景的对话以及其在几个评估指标下的得分和原因，请根据得分对原对话中assistant的回应进行改进（仅修改assistant的content）。
以json的对话格式返回，例如：
```json[{{"role": "user", "content": <请求内容>}}, {{"role": "assistant", "content": <回复内容>}}, ...]```

场景：
{theme}
对话：
{message}
得分: 
{scores}
'''

planning_template = \
'''
你是一个规划智能体，你需要规划教育领域的场景数据生成过程，并通过调用函数执行整个过程。
生成的数据为json格式的对话，例如：
```json[{{"role": "user","content": "..."}},{{"role": "assistant","content": "..."}}]```
其中user是教育领域大模型的主要服务对象，如学生、教师等；assistant需要尽可能地满足服务对象在特定教育场景下给出的指令。

大致的生成过程为：
1. 获得元数据：为了保证数据的多样性，减少重复，每一条数据都尽量需要使用元数据生成
    -对于和具体题目相关的场景，可从外部数据库中采样题目作为元数据
        -在进行采样前，可以通过相关方法查看外部数据库有哪些内容
        -采样得到的数据有些有答案和解析过程
    -对于和学生画像相关的场景，可以生成元数据并进行保存，生成的时候再去采样
2. 生成数据：生成提示并使用提示获取assistant模型的响应
    -**在user的视角**使用给定的场景和元数据生成一个提示，确保被询问的模型是辅助教学任务的那一方
    -确保在提示中使用了meta_data中的内容，根据场景不同考虑user是否会得知标准答案和解析，如果不会不要把相关内容写进提示内
    -调用相关方法获取assistant模型的响应
3. 整合数据：将第2步生成的提示和获得的模型响应整理成目标json格式

注意：
    -生成面对**中文场景**的教育场景数据，确保对话双方的主体语言为中文（外语科目会不可避免地涉及到外语，但也请确保对话的主题语言为中文）

教学场景/任务：
{task}
'''